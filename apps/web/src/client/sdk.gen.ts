// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from '@hey-api/client-fetch'
import type {
  CreateTaskRouteData,
  CreateTaskRouteResponses,
  CreateTaskRouteErrors,
  DeleteTaskRouteData,
  DeleteTaskRouteResponses,
  DeleteTaskRouteErrors,
  GetTaskRouteData,
  GetTaskRouteResponses,
  GetTaskRouteErrors,
  CancelTaskRouteData,
  CancelTaskRouteResponses,
  CancelTaskRouteErrors,
  UpdateTaskRouteData,
  UpdateTaskRouteResponses,
  UpdateTaskRouteErrors,
  GetTasksRouteData,
  GetTasksRouteResponses,
  GetTasksRouteErrors,
  HealthCheckData,
  HealthCheckResponses,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Create Task
 * Queues a document for processing and returns a TaskResponse containing:
 * - Task ID for status polling
 * - Initial configuration
 * - File metadata
 * - Processing status
 * - Creation timestamp
 * - Presigned URLs for file access
 *
 * The returned task will typically be in a `Starting` or `Processing` state.
 * Use the `GET /task/{task_id}` endpoint to poll for completion.
 */
export const createTaskRoute = <ThrowOnError extends boolean = false>(
  options: Options<CreateTaskRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTaskRouteResponses,
    CreateTaskRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/task/parse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Delete Task
 * Delete a task by its ID.
 *
 * Requirements:
 * - Task must have status `Succeeded` or `Failed`
 */
export const deleteTaskRoute = <ThrowOnError extends boolean = false>(
  options: Options<DeleteTaskRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteTaskRouteResponses,
    DeleteTaskRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/task/{task_id}',
    ...options,
  })
}

/**
 * Get Task
 * Retrieves detailed information about a task by its ID, including:
 * - Processing status
 * - Task configuration
 * - Output data (if processing is complete)
 * - File metadata (name, page count)
 * - Timestamps (created, started, finished)
 * - Presigned URLs for accessing files
 *
 * This endpoint can be used to:
 * 1. Poll the task status during processing
 * 2. Retrieve the final output once processing is complete
 * 3. Access task metadata and configuration
 */
export const getTaskRoute = <ThrowOnError extends boolean = false>(
  options: Options<GetTaskRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTaskRouteResponses,
    GetTaskRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/task/{task_id}',
    ...options,
  })
}

/**
 * Cancel Task
 * Cancel a task that hasn't started processing yet:
 * - For new tasks: Status will be updated to `Cancelled`
 * - For updating tasks: Task will revert to the previous state
 *
 * Requirements:
 * - Task must have status `Starting`
 */
export const cancelTaskRoute = <ThrowOnError extends boolean = false>(
  options: Options<CancelTaskRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CancelTaskRouteResponses,
    CancelTaskRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/task/{task_id}/cancel',
    ...options,
  })
}

/**
 * Update Task
 * Updates an existing task's configuration and reprocesses the document.
 * The original configuration will be used for all values that are not provided in the update.
 *
 * Requirements:
 * - Task must have status `Succeeded` or `Failed`
 * - New configuration must be different from the current one
 *
 * The returned task will typically be in a `Starting` or `Processing` state.
 * Use the `GET /task/{task_id}` endpoint to poll for completion.
 */
export const updateTaskRoute = <ThrowOnError extends boolean = false>(
  options: Options<UpdateTaskRouteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateTaskRouteResponses,
    UpdateTaskRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/task/{task_id}/parse',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Get Tasks
 * Retrieves a list of tasks
 *
 * Example usage:
 * `GET /api/v1/tasks?page=1&limit=10&include_chunks=false`
 */
export const getTasksRoute = <ThrowOnError extends boolean = false>(
  options?: Options<GetTasksRouteData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetTasksRouteResponses,
    GetTasksRouteErrors,
    ThrowOnError
  >({
    security: [
      {
        name: 'Authorization',
        type: 'apiKey',
      },
    ],
    url: '/api/v1/tasks',
    ...options,
  })
}

/**
 * Health Check
 * Confirmation that the service can respond to requests
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options,
  })
}
